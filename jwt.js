"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWTVerify = exports.JWTSign = void 0;
const getConfig_1 = require("./getConfig");
const jose_1 = require("jose");
async function JWTSign(payload, usePrivate, audience, issuer) {
    try {
        const config = await (0, getConfig_1.getConfig)();
        if (!config || !(config === null || config === void 0 ? void 0 : config.MoneyHubAPI))
            return null;
        const jwks = usePrivate ? { keys: config.MoneyHubAPI.Keys } : { keys: config.MoneyHubAPI.PublicKeys };
        const signingKey = jose_1.JWKS.asKeyStore(jwks).get({ use: 'sig' });
        const token = jose_1.JWT.sign(payload, signingKey, {
            audience,
            issuer,
            iat: true,
            expiresIn: '60s',
            header: {
                typ: 'JWT',
            },
        });
        return token;
    }
    catch (error) {
        console.log('Error:', error);
        return null;
    }
}
exports.JWTSign = JWTSign;
async function JWTVerify(token, usePrivate, audience, issuer) {
    try {
        const config = await (0, getConfig_1.getConfig)();
        if (!config || !(config === null || config === void 0 ? void 0 : config.MoneyHubAPI))
            return null;
        const jwks = usePrivate ? { keys: config.MoneyHubAPI.Keys } : { keys: config.MoneyHubAPI.PublicKeys };
        const signingKey = jose_1.JWKS.asKeyStore(jwks).get({ use: 'sig' });
        const decode = jose_1.JWT.verify(token, signingKey, {
            audience,
            issuer,
        });
        return decode;
    }
    catch (error) {
        console.log('Error:', error);
        return null;
    }
}
exports.JWTVerify = JWTVerify;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiand0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUFrRDtBQUNsRCwrQkFBOEM7QUFJdkMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxPQUFZLEVBQUUsVUFBbUIsRUFBRSxRQUFnQixFQUFFLE1BQWM7SUFDL0YsSUFBSTtRQUVGLE1BQU0sTUFBTSxHQUE4QixNQUFNLElBQUEscUJBQVMsR0FBRSxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLENBQUE7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNqRCxNQUFNLElBQUksR0FBUSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFDLENBQUM7UUFDeEcsTUFBTSxVQUFVLEdBQUcsV0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUMzRCxNQUFNLEtBQUssR0FBRyxVQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDMUMsUUFBUTtZQUNSLE1BQU07WUFDTixHQUFHLEVBQUUsSUFBSTtZQUNULFNBQVMsRUFBRSxLQUFLO1lBQ2hCLE1BQU0sRUFBRTtnQkFDTixHQUFHLEVBQUUsS0FBSzthQUNYO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFyQkQsMEJBcUJDO0FBRU0sS0FBSyxVQUFVLFNBQVMsQ0FBQyxLQUFhLEVBQUUsVUFBbUIsRUFBRSxRQUFnQixFQUFFLE1BQWM7SUFDbEcsSUFBSTtRQUVGLE1BQU0sTUFBTSxHQUE4QixNQUFNLElBQUEscUJBQVMsR0FBRSxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLENBQUE7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNqRCxNQUFNLElBQUksR0FBUSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFDLENBQUM7UUFDdkcsTUFBTSxVQUFVLEdBQUcsV0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUMzRCxNQUFNLE1BQU0sR0FBRyxVQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7WUFDM0MsUUFBUTtZQUNSLE1BQU07U0FDUCxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQWhCRCw4QkFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1d1bmRlckNvbmZpZ30gZnJvbSBcIi4uL2NvaW5zXCI7XG5pbXBvcnQge2dldENvbmZpZywgQ29uZmlnRGF0YX0gZnJvbSBcIi4vZ2V0Q29uZmlnXCI7XG5pbXBvcnQge0pXVCwgSldLUywgSlNPTldlYktleVNldH0gZnJvbSAnam9zZSc7XG5cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gSldUU2lnbihwYXlsb2FkOiBhbnksIHVzZVByaXZhdGU6IGJvb2xlYW4sIGF1ZGllbmNlOiBzdHJpbmcsIGlzc3Vlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfG51bGw+IHtcbiAgdHJ5IHtcbiAgICAvLyBHZXQgdGhlIGtleSBmcm9tIHRoZSBrZXlzIC0gd2Ugd2lsbCB1c2UgdGhlIHByaXZhdGUga2V5IHRvIHNpZ25cbiAgICBjb25zdCBjb25maWcgPSA8Q29uZmlnRGF0YSAmIFd1bmRlckNvbmZpZz5hd2FpdCBnZXRDb25maWcoKTtcbiAgICBpZiAoIWNvbmZpZyB8fCAhY29uZmlnPy5Nb25leUh1YkFQSSkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgandrczogYW55ID0gdXNlUHJpdmF0ZSA/IHtrZXlzOiBjb25maWchLk1vbmV5SHViQVBJLktleXN9IDoge2tleXM6IGNvbmZpZy5Nb25leUh1YkFQSS5QdWJsaWNLZXlzfTtcbiAgICBjb25zdCBzaWduaW5nS2V5ID0gSldLUy5hc0tleVN0b3JlKGp3a3MpLmdldCh7dXNlOiAnc2lnJ30pO1xuICAgIGNvbnN0IHRva2VuID0gSldULnNpZ24ocGF5bG9hZCwgc2lnbmluZ0tleSwge1xuICAgICAgYXVkaWVuY2UsXG4gICAgICBpc3N1ZXIsXG4gICAgICBpYXQ6IHRydWUsXG4gICAgICBleHBpcmVzSW46ICc2MHMnLFxuICAgICAgaGVhZGVyOiB7XG4gICAgICAgIHR5cDogJ0pXVCcsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBKV1RWZXJpZnkodG9rZW46IHN0cmluZywgdXNlUHJpdmF0ZTogYm9vbGVhbiwgYXVkaWVuY2U6IHN0cmluZywgaXNzdWVyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICB0cnkge1xuICAgIC8vIEdldCB0aGUga2V5IGZyb20gdGhlIGtleXMgLSB3ZSB3aWxsIHVzZSB0aGUgcHJpdmF0ZSBrZXkgdG8gc2lnblxuICAgIGNvbnN0IGNvbmZpZyA9IDxDb25maWdEYXRhICYgV3VuZGVyQ29uZmlnPmF3YWl0IGdldENvbmZpZygpO1xuICAgIGlmICghY29uZmlnIHx8ICFjb25maWc/Lk1vbmV5SHViQVBJKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBqd2tzOiBhbnkgPSB1c2VQcml2YXRlID8ge2tleXM6IGNvbmZpZy5Nb25leUh1YkFQSS5LZXlzfSA6IHtrZXlzOiBjb25maWcuTW9uZXlIdWJBUEkuUHVibGljS2V5c307XG4gICAgY29uc3Qgc2lnbmluZ0tleSA9IEpXS1MuYXNLZXlTdG9yZShqd2tzKS5nZXQoe3VzZTogJ3NpZyd9KTtcbiAgICBjb25zdCBkZWNvZGUgPSBKV1QudmVyaWZ5KHRva2VuLCBzaWduaW5nS2V5LCB7XG4gICAgICBhdWRpZW5jZSxcbiAgICAgIGlzc3VlcixcbiAgICB9KTtcbiAgICByZXR1cm4gZGVjb2RlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKCdFcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==