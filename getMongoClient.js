#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectId = exports.StoreType = exports.disconnectMongo = exports.connectMongo = void 0;
const mongodb_1 = require("mongodb");
Object.defineProperty(exports, "ObjectId", { enumerable: true, get: function () { return mongodb_1.ObjectId; } });
let client = null;
const connectMongo = async (MONGOURL) => {
    if (client)
        return client;
    let options = {
        connectTimeoutMS: 5000,
        serverSelectionTimeoutMS: 5000,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    };
    console.log('Making a new connection to mongo ');
    client = new mongodb_1.MongoClient(MONGOURL, options);
    try {
        await client.connect();
        return client;
    }
    catch (error) {
        console.log('Could not connect to mongodb instance ', error);
        client = null;
        return null;
    }
};
exports.connectMongo = connectMongo;
const disconnectMongo = async () => {
    if (client)
        await client.close(true);
    client = null;
};
exports.disconnectMongo = disconnectMongo;
var StoreType;
(function (StoreType) {
    StoreType[StoreType["Connection"] = 0] = "Connection";
    StoreType[StoreType["WorkoutRecord"] = 1] = "WorkoutRecord";
    StoreType[StoreType["WorkoutStage"] = 2] = "WorkoutStage";
    StoreType[StoreType["LeaderBoardCache"] = 3] = "LeaderBoardCache";
})(StoreType = exports.StoreType || (exports.StoreType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0TW9uZ29DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZXRNb25nb0NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBV0EscUNBQThDO0FBbUR0Qyx5RkFuRGEsa0JBQVEsT0FtRGI7QUFsRGhCLElBQUksTUFBTSxHQUF1QixJQUFJLENBQUM7QUFLL0IsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUMvQixRQUFnQixFQUNhLEVBQUU7SUFDL0IsSUFBSSxNQUFNO1FBQUUsT0FBTyxNQUFNLENBQUM7SUFDMUIsSUFBSSxPQUFPLEdBQVE7UUFDakIsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0Qix3QkFBd0IsRUFBRSxJQUFJO1FBQzlCLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGtCQUFrQixFQUFFLElBQUk7S0FDekIsQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQztJQUNqRCxNQUFNLEdBQUcsSUFBSSxxQkFBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUc1QyxJQUFJO1FBQ0YsTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkIsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQztBQXRCVyxRQUFBLFlBQVksZ0JBc0J2QjtBQUVLLE1BQU0sZUFBZSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3hDLElBQUksTUFBTTtRQUFFLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUhXLFFBQUEsZUFBZSxtQkFHMUI7QUFNRixJQUFZLFNBS1g7QUFMRCxXQUFZLFNBQVM7SUFDbkIscURBQVUsQ0FBQTtJQUNWLDJEQUFhLENBQUE7SUFDYix5REFBWSxDQUFBO0lBQ1osaUVBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUxXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBS3BCIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLyoqXG4gKiBAZmlsZSBnZXRNb25nb0NsaWVudC5qc1xuICogQHZlcnNpb24gMVxuICogQGRhdGUgMDEgSnVsIDIwMjFcbiAqIEBhdXRob3IgQ2hyaXMgQ3VsbGVuXG4gKiBAY29weXJpZ2h0IFNreWxhcmsgQ3JlYXRpdmUgTHRkLCAyMDIxXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29ubmVjdCB0byBtb25nbyBpbnN0YW5jZSBhbmQgcmV0dXJuIGEgTW9uZ29DbGllbnQgb2JqZWN0XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5pbXBvcnQge01vbmdvQ2xpZW50LCBPYmplY3RJZH0gZnJvbSAnbW9uZ29kYic7XG5sZXQgY2xpZW50OiBNb25nb0NsaWVudCB8IG51bGwgPSBudWxsO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ29ubmVjdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBjb25uZWN0TW9uZ28gPSBhc3luYyAoXG4gIE1PTkdPVVJMOiBzdHJpbmcsXG4pOiBQcm9taXNlPE1vbmdvQ2xpZW50IHwgbnVsbD4gPT4ge1xuICBpZiAoY2xpZW50KSByZXR1cm4gY2xpZW50O1xuICBsZXQgb3B0aW9uczogYW55ID0ge1xuICAgIGNvbm5lY3RUaW1lb3V0TVM6IDUwMDAsXG4gICAgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiA1MDAwLFxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXG4gIH07XG4gIGNvbnNvbGUubG9nKCdNYWtpbmcgYSBuZXcgY29ubmVjdGlvbiB0byBtb25nbyAnKTtcbiAgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KE1PTkdPVVJMLCBvcHRpb25zKTtcbiAgLy8gVHlwZXNjcmlwdCBjYW5ub3QgY29wZSB3aXRoIHRoZXNlIGluIHRoZSBhYm92ZSBzZXR0aW5nXG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuICAgIHJldHVybiBjbGllbnQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBjb25uZWN0IHRvIG1vbmdvZGIgaW5zdGFuY2UgJywgZXJyb3IpO1xuICAgIGNsaWVudCA9IG51bGw7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkaXNjb25uZWN0TW9uZ28gPSBhc3luYyAoKSA9PiB7XG4gIGlmIChjbGllbnQpIGF3YWl0IGNsaWVudC5jbG9zZSh0cnVlKTtcbiAgY2xpZW50ID0gbnVsbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTdG9yYWdlIFR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZW51bSBTdG9yZVR5cGUge1xuICBDb25uZWN0aW9uLFxuICBXb3Jrb3V0UmVjb3JkLFxuICBXb3Jrb3V0U3RhZ2UsXG4gIExlYWRlckJvYXJkQ2FjaGUsXG59XG5cbmV4cG9ydCB0eXBlIHN0b3JlUmVjb3JkID0ge1xuICBfaWQ6IE9iamVjdElkO1xuICByZWNvcmRUeXBlOiBTdG9yZVR5cGU7XG59O1xuXG5leHBvcnQge09iamVjdElkfTtcbiJdfQ==