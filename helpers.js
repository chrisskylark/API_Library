"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.injectDate = exports.shortMonthName = exports.monthName = exports.decodeBody = exports.getDistanceFromLatLonInKm = exports.sendMessage = exports.getMgmt = exports.currentConfig = exports.calculateAge = exports.spliceString = exports.hasAllKeys = exports.uuidv4 = exports.zeroPad = exports.daysBetween = exports.minutesFromDuration = exports.tryParse = exports.randomInt = exports.randomDate = exports.disconnectMySQL = exports.getMySQLClient = exports.lambda = void 0;
const AWS = __importStar(require("aws-sdk"));
const _ = __importStar(require("lodash"));
const crypto = __importStar(require("crypto"));
const getConfig_1 = require("./getConfig");
Object.defineProperty(exports, "getConfig", { enumerable: true, get: function () { return getConfig_1.getConfig; } });
const mysql = __importStar(require("mysql2/promise"));
let apigwManagementApi = null;
exports.lambda = new AWS.Lambda();
let MYSQL = null;
async function getMySQLClient() {
    if (MYSQL)
        return MYSQL;
    const config = await (0, getConfig_1.getConfig)();
    if (!config || !config.mysql)
        throw new Error('Config/MySQL Config could not be retrieved');
    try {
        MYSQL = await mysql.createConnection(config.mysql);
        await MYSQL.connect();
        return MYSQL;
    }
    catch (error) {
        console.error('Cannot connect to MySQL server ', error);
    }
    return null;
}
exports.getMySQLClient = getMySQLClient;
async function disconnectMySQL() {
    if (MYSQL && MYSQL)
        await MYSQL.end();
    MYSQL = null;
    return true;
}
exports.disconnectMySQL = disconnectMySQL;
function randomDate(start, end) {
    end = end || new Date();
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}
exports.randomDate = randomDate;
function randomInt(min, max) {
    return crypto.randomInt(min, max);
}
exports.randomInt = randomInt;
function tryParse(json) {
    try {
        return JSON.parse(json);
    }
    catch (e) {
        return {};
    }
}
exports.tryParse = tryParse;
function minutesFromDuration(duration) {
    let stages;
    if (duration.includes(':')) {
        stages = duration.split(':');
        if (stages.length == 0) {
            stages = '1:00:00'.split(':');
        }
        else if (stages.length > 2) {
            stages = 60 * stages[0] + stages[1] * 1;
        }
        else if ((stages.length = 2)) {
            stages = 1 * stages[0];
        }
        if (isNaN(stages) || stages < 10)
            stages = 60;
    }
    else {
        stages = Number.parseInt(duration);
        if (_.isNaN(stages))
            stages = 60;
    }
    return stages;
}
exports.minutesFromDuration = minutesFromDuration;
function daysBetween(firstDate, secondDate) {
    const oneDay = 24 * 60 * 60 * 1000;
    const diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay));
    return diffDays;
}
exports.daysBetween = daysBetween;
function zeroPad(num, places) {
    return String(num).padStart(places, '0');
}
exports.zeroPad = zeroPad;
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
exports.uuidv4 = uuidv4;
function hasAllKeys(obj, keys) {
    let has = true;
    keys.forEach((k) => {
        has = has && Object.prototype.hasOwnProperty.call(obj, k);
    });
    return has;
}
exports.hasAllKeys = hasAllKeys;
function spliceString(string, index, count = 0, insert = '') {
    const array = _.toArray(string);
    array.splice(index, count, insert);
    return array.join('');
}
exports.spliceString = spliceString;
function calculateAge(birthday) {
    var ageDifMs = Date.now() - birthday.getTime();
    var ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
}
exports.calculateAge = calculateAge;
async function currentConfig() {
    let config = await (0, getConfig_1.getConfig)();
    return config;
}
exports.currentConfig = currentConfig;
function getMgmt(event) {
    if (apigwManagementApi)
        return apigwManagementApi;
    apigwManagementApi = new AWS.ApiGatewayManagementApi({
        apiVersion: '2018-11-29',
        endpoint: event.requestContext.domainName + '/' + event.requestContext.stage,
    });
    return apigwManagementApi;
}
exports.getMgmt = getMgmt;
async function sendMessage(to, action, data) {
    data.action = action;
    try {
        if (apigwManagementApi) {
            await apigwManagementApi
                .postToConnection({
                ConnectionId: to,
                Data: JSON.stringify(data),
            })
                .promise();
            return true;
        }
        return false;
    }
    catch (e) {
        console.log('Error sending message ', e);
        return false;
    }
}
exports.sendMessage = sendMessage;
function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    var R = 6371;
    var dLat = deg2rad(lat2 - lat1);
    var dLon = deg2rad(lon2 - lon1);
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d;
}
exports.getDistanceFromLatLonInKm = getDistanceFromLatLonInKm;
function deg2rad(deg) {
    return deg * (Math.PI / 180);
}
function decodeBody(event) {
    let bodyRaw = event.body;
    let body = '';
    let bodyJSON;
    if (event.isBase64Encoded) {
        body = Buffer.from(bodyRaw, 'base64').toString('utf8');
    }
    try {
        bodyJSON = JSON.parse(body);
        return bodyJSON;
    }
    catch (_a) {
        return body;
    }
}
exports.decodeBody = decodeBody;
function monthName(month) {
    let months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    if (month < 0 || month > 11)
        throw new Error("Invalid month number");
    return months[month];
}
exports.monthName = monthName;
function shortMonthName(month) {
    return monthName(month).substring(0, 3).toUpperCase();
}
exports.shortMonthName = shortMonthName;
function injectDate(text) {
    function pad(n) {
        return n < 10 ? '0' + n : '' + n;
    }
    let timeNow = new Date();
    text = text.replace(/%sm/g, shortMonthName(timeNow.getMonth()));
    text = text.replace(/%lm/g, monthName(timeNow.getMonth()));
    text = text.replace(/%d/g, pad(timeNow.getDate()));
    text = text.replace(/%m/g, pad(timeNow.getMonth() + 1));
    text = text.replace(/%y/g, pad(timeNow.getFullYear()));
    text = text.replace(/%h/g, pad(timeNow.getHours()));
    text = text.replace(/%n/g, pad(timeNow.getMinutes()));
    text = text.replace(/%s/g, pad(timeNow.getSeconds()));
    text = text.replace(/%l/g, pad(timeNow.getMilliseconds()));
    return text;
}
exports.injectDate = injectDate;
//# sourceMappingURL=data:application/json;base64,